#!/usr/bin/env ruby
# encoding: UTF-8

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'multi_json', require: false
  gem 'oj', require: false
  gem 'fast_multi_json', path: '.'
end


# Adapted from https://raw.githubusercontent.com/ohler55/oj/39c975a048d89f42062bb542fae98109520b10eb/test/perf.rb
class Perf

  def initialize()
    @items = []
  end

  def add(title, op, &blk)
    @items << Item.new(title, op, &blk)
  end

  def before(title, &blk)
    @items.each do |i|
      if title == i.title
        i.set_before(&blk)
        break
      end
    end
  end

  def run(iter)
    base = Item.new(nil, nil) { }
    base.run(iter, 0.0)
    @items.each do |i|
      i.run(iter, base.duration)
      if i.error.nil?
        puts "#{i.title}.#{i.op} #{iter} times in %0.3f seconds or %0.3f #{i.op}/sec." % [i.duration, iter / i.duration]
      else
        puts "***** #{i.title}.#{i.op} failed! #{i.error}"
      end
    end
    summary()
  end

  def summary()
    fastest = nil
    slowest = nil
    width = 6
    @items.each do |i|
      next if i.duration.nil?
      width = i.title.size if width < i.title.size
    end
    iva = @items.clone
    iva.delete_if { |i| i.duration.nil? }
    iva = iva.sort_by { |i| i.duration }
    puts
    puts "Summary:"
    puts "%*s  time (secs)  rate (ops/sec)" % [width, 'System']
    puts "#{'-' * width}  -----------  --------------"
    iva.each do |i|
      if i.duration.nil?
      else
        puts "%*s %11.3f  %14.3f" % [width, i.title, i.duration, i.rate ]
      end
    end
    puts
    puts "Comparison Matrix\n(performance factor, 2.0 means row is twice as fast as column)"
    puts ([' ' * width] + iva.map { |i| "%*s" % [width, i.title] }).join('  ')
    puts (['-' * width] + iva.map { |i| '-' * width }).join('  ')
    iva.each do |i|
      line = ["%*s" % [width, i.title]]
      iva.each do |o|
        line << "%*.2f" % [width, o.duration / i.duration]
      end
      puts line.join('  ')
    end
    puts
  end

  class Item
    attr_accessor :title
    attr_accessor :op
    attr_accessor :blk
    attr_accessor :duration
    attr_accessor :rate
    attr_accessor :error

    def initialize(title, op, &blk)
      @title = title
      @blk = blk
      @op = op
      @duration = nil
      @rate = nil
      @error = nil
      @before = nil
    end

    def set_before(&blk)
      @before = blk
    end

    def run(iter, base)
      begin
        GC.start
        @before.call unless @before.nil?
        start = Time.now
        iter.times { @blk.call }
        @duration = Time.now - start - base
        @duration = 0.0 if @duration < 0.0
        @rate = iter / @duration
      rescue Exception => e
        @error = "#{e.class}: #{e.message}"
      end
    end

  end # Item
end # Perf


# Adapted from https://github.com/ohler55/oj/blob/39c975a048d89f42062bb542fae98109520b10eb/test/perf_compat.rb
require 'optparse'
require 'oj'
require 'fast_multi_json'
require 'multi_json'

$verbose = false
$indent = 0
$iter = 20000
$size = 0

opts = OptionParser.new
opts.on("-v", "verbose")                                    { $verbose = true }
opts.on("-c", "--count [Int]", Integer, "iterations")       { |i| $iter = i }
opts.on("-i", "--indent [Int]", Integer, "indentation")     { |i| $indent = i }
opts.on("-s", "--size [Int]", Integer, "size (~Kbytes)")    { |i| $size = i }
opts.on("-h", "--help", "Show this display")                { puts opts; Process.exit!(0) }
files = opts.parse(ARGV)

def capture_error(tag, orig, load_key, dump_key, &blk)
  begin
    obj = blk.call(orig)
    puts obj unless orig == obj
    raise "#{tag} #{dump_key} and #{load_key} did not return the same object as the original." unless orig == obj
  rescue Exception => e
    $failed[tag] = "#{e.class}: #{e.message}"
  end
end

# Verify that all packages dump and load correctly and return the same Object as the original.
capture_error('Oj:compat', $obj, 'load', 'dump') { |o| Oj.compat_load(Oj.dump(o, :mode => :compat)) }
capture_error('MultiJson', $obj, 'load', 'dump') { |o| MultiJson.load(MultiJson.dump(o)) }
capture_error('FastMultiJson', $obj, 'oj_load', 'dump') { |o| Oj.compat_load(FastMultiJson.to_json(o)) }
capture_error('JSON::Ext', $obj, 'generate', 'parse') { |o|
  require 'json'
  require 'json/ext'
  JSON.generator = JSON::Ext::Generator
  JSON.parser = JSON::Ext::Parser
  JSON.load(JSON.generate(o))
}

module One
  module Two
    module Three
      class Empty

        def initialize()
          @a = 1
          @b = 2
          @c = 3
        end

        def eql?(o)
          self.class == o.class && @a == o.a && @b = o.b && @c = o.c
        end
        alias == eql?

        def as_json(*a)
          {JSON.create_id => self.class.name, 'a' => @a, 'b' => @b, 'c' => @c }
        end

        def to_json(*a)
          JSON.generate(as_json())
        end

        def self.json_create(h)
          self.new()
        end
      end # Empty
    end # Three
  end # Two
end # One

$obj = {
  'a' => 'Alpha', # string
  'b' => true,    # boolean
  'c' => 12345,   # number
  'd' => [ true, [false, [-123456789, nil], 3.9676, ['Something else.', false], nil]], # mix it up array
  'e' => { 'zero' => nil, 'one' => 1, 'two' => 2, 'three' => [3], 'four' => [0, 1, 2, 3, 4] }, # hash
  'f' => nil,     # nil
  'g' => One::Two::Three::Empty.new(),
  'h' => { 'a' => { 'b' => { 'c' => { 'd' => {'e' => { 'f' => { 'g' => nil }}}}}}}, # deep hash, not that deep
  'i' => [[[[[[[nil]]]]]]]  # deep array, again, not that deep
}

Oj.default_options = { :indent => $indent, :mode => :compat, :use_to_json => true, :create_additions => true, :create_id => '^o' }

if 0 < $size
  s = Oj.dump($obj).size + 1
  cnt = $size * 1024 / s
  o = $obj
  $obj = []
  cnt.times do
    $obj << o
  end
end

$failed = {} # key is same as String used in tests later

puts '-' * 80
puts "Compat dump Performance"
perf = Perf.new()
unless $failed.has_key?('JSON::Ext')
  perf.add('JSON::Ext', 'dump') { JSON.dump($obj) }
  perf.before('JSON::Ext') { JSON.parser = JSON::Ext::Parser }
end
unless $failed.has_key?('MultiJson')
  perf.add('MultiJson', 'dump') { MultiJson.dump($oj) }
end
unless $failed.has_key?('FastMultiJson')
  perf.add('FastMultiJson', 'to_json') { FastMultiJson.to_json($oj) }
end
unless $failed.has_key?('Oj:compat')
  perf.add('Oj:compat', 'dump_compat') { Oj.dump($oj, mode: :compat) }
end
perf.run($iter)

puts
puts '-' * 80
puts

unless $failed.empty?
  puts "The following packages were not included for the reason listed"
  $failed.each { |tag,msg| puts "***** #{tag}: #{msg}" }
end
